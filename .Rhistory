if (is.data.frame(df) == FALSE){stop("input <df> is no data frame")}
if (any(dim(df) == 0)){stop("at least one dimesion of <df> is zero")}
if (dim(df)[2] == 1){warning("ups")}
numeric <- sapply(df, is.numeric)
numeric_cols <- df[, numeric]
data.frame(lapply(numeric_cols, mean))
}
col_means(iris[,2])
col_means(iris[,2,drop=FALSE])
head(irs)
head(iris)
col_means(mtcars[, "mpg", drop = F])
col_means <- function(df) {
if (is.data.frame(df) == FALSE){stop("input <df> is no data frame")}
if (any(dim(df) == 0)){stop("at least one dimesion of <df> is zero")}
if (dim(df)[2] == 1){
data.frame(mean(df))
break
}
numeric <- sapply(df, is.numeric)
numeric_cols <- df[, numeric]
data.frame(lapply(numeric_cols, mean))
}
col_means(mtcars[, "mpg", drop = F])
mean(mtcars[, "mpg", drop = F])
blub <- mtcars[, "mpg", drop = F]
str(blub)
mean(blbu)
col_means <- function(df) {
if (is.data.frame(df) == FALSE){stop("input <df> is no data frame")}
if (any(dim(df) == 0)){stop("at least one dimesion of <df> is zero")}
if (dim(df)[2] == 1){
data.frame(mean(df[,1]))
break
}
col_means <- function(df) {
if (is.data.frame(df) == FALSE){stop("input <df> is no data frame")}
if (any(dim(df) == 0)){stop("at least one dimesion of <df> is zero")}
if (dim(df)[2] == 1){
data.frame(mean(df[,1]))
break
}
numeric <- sapply(df, is.numeric)
numeric_cols <- df[, numeric]
data.frame(lapply(numeric_cols, mean))
}
col_means(mtcars[, "mpg", drop = F])
dim(blbu)
dim(blub)
mean(blub)
mean(blub[,1])
col_means <- function(df) {
if (is.data.frame(df) == FALSE){stop("input <df> is no data frame")}
if (any(dim(df) == 0)){stop("at least one dimesion of <df> is zero")}
if (dim(df)[2] == 1){
mean(df[,1])
break
}
numeric <- sapply(df, is.numeric)
numeric_cols <- df[, numeric]
data.frame(lapply(numeric_cols, mean))
}
col_means(mtcars[, "mpg", drop = F])
mean(blub)
any(is.na(blub))
mean(blub[,1])
mean(blub)
col_means <- function(df) {
if (is.data.frame(df) == FALSE){stop("input <df> is no data frame")}
if (any(dim(df) == 0)){stop("at least one dimesion of <df> is zero")}
if (dim(df)[2] == 1){
result(mean(df[,1]))
}
numeric <- sapply(df, is.numeric)
numeric_cols <- df[, numeric]
data.frame(lapply(numeric_cols, mean))
}
col_means(mtcars[, "mpg", drop = F])
match.arg
?match.arg
center <- function(x, type = c("mean", "median", "trimmed")) {
type <- match.arg(type)
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1))
}
x <- rcauchy(10)
center(x, "t")       # Works
center(x, "med")     # Works
try(center(x, "m"))  # Error
center(x, "m")
stopifnot(identical(center(x),       center(x, "mean")),
identical(center(x, NULL), center(x, "mean")) )
match.arg(c("gauss", "rect", "ep"),
c("gaussian", "epanechnikov", "rectangular", "triangular"),
several.ok = TRUE)
test_function <- function (arg, choices, several.ok = FALSE)
{
if (missing(choices)) {
formal.args <- formals(sys.function(sys.parent()))
choices <- eval(formal.args[[deparse(substitute(arg))]])
}
if (is.null(arg))
return(choices[1L])
else if (!is.character(arg))
stop("'arg' must be NULL or a character vector")
if (!several.ok) {
if (identical(arg, choices))
return(arg[1L])
if (length(arg) > 1L)
stop("'arg' must be of length 1")
}
else if (length(arg) == 0L)
stop("'arg' must be of length >= 1")
i <- pmatch(arg, choices, nomatch = 0L, duplicates.ok = TRUE)
if (all(i == 0L))
stop(gettextf("'arg' should be one of %s", paste(dQuote(choices),
collapse = ", ")), domain = NA)
i <- i[i > 0L]
if (!several.ok && length(i) > 1)
stop("there is more than one match in 'match.arg'")
choices[i]
}
}
test_function <- function (arg, choices, several.ok = FALSE) {
if (missing(choices)) {
formal.args <- formals(sys.function(sys.parent()))
choices <- eval(formal.args[[deparse(substitute(arg))]])
}
if (is.null(arg))
return(choices[1L])
else if (!is.character(arg))
stop("'arg' must be NULL or a character vector")
if (!several.ok) {
if (identical(arg, choices))
return(arg[1L])
if (length(arg) > 1L)
stop("'arg' must be of length 1")
}
else if (length(arg) == 0L)
stop("'arg' must be of length >= 1")
i <- pmatch(arg, choices, nomatch = 0L, duplicates.ok = TRUE)
if (all(i == 0L))
stop(gettextf("'arg' should be one of %s", paste(dQuote(choices),
collapse = ", ")), domain = NA)
i <- i[i > 0L]
if (!several.ok && length(i) > 1)
stop("there is more than one match in 'match.arg'")
choices[i]
}
debug(test_function)
debug(match.arg)
match.arg(type)
?formals
center <- function(x, type = c("mean", "median", "trimmed")) {
type <- test_function(type)
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1))
}
x <- rcauchy(10)
center(x, "t")       # Works
center(x, "med")     # Works
try(center(x, "m"))  # Error
stopifnot(identical(center(x),       center(x, "mean")),
identical(center(x, NULL), center(x, "mean")) )
source(matc.arg)
source(match.arg)
center <- function(x, type = c("mean", "median", "trimmed")) {
type <- match.arg(type)
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1))
}
x <- rcauchy(10)
center(x, "t")       # Works
center(x, "med")     # Works
try(center(x, "m"))  # Error
stopifnot(identical(center(x),       center(x, "mean")),
identical(center(x, NULL), center(x, "mean")) )
debug(match.arg)
wtid <- read.csv("wtid-20141002.csv",
skip=1, header=TRUE)
stop
stoppp
undebug
undebug()
undebug()
wtid <- read.csv("wtid-20141002.csv",
skip=1, header=TRUE)
keeps <- c("Country", "Year", "P99.income.threshold",
"P99.5.income.threshold", "P99.9.income.threshold",
"P99.99.income.threshold")
wtid <- wtid[keeps]
colnames(wtid) <- c("country","year", "p99", "p995", "p999", "p9999")
# gives 99.99% Quantil from the United States for 1981 and 2001
wtid[wtid$country=="United States" & wtid$year=="1981", "p999"]
wtid[wtid$country=="United States" & wtid$year=="2001", "p999"]
wtid[wtid$country=="United States" & wtid$year=="2001" | wtid$year=="1981", "p999"]
wtid[wtid$country=="United States" & (wtid$year=="2001" | wtid$year=="1981"), "p999"]
wtid[wtid$country=="United States" & (wtid$year=="1981" | wtid$year=="2001"), "p999"]
?subset
subset(x=wtid$p999, "United States", "2001")
subset(x=wtid$p999, c("United States", "2001"))
subset(x=wtid$p999, c(country=="United States", year=="2001"))
data.frame(x, country=="United States", year=="2001")
data.frame(wtid, country=="United States", year=="2001")
str(wtid)
subset(x=wtid, country=="United States", year=="2001", select="p999")
subset(wtid, country=="United States", year=="2001", select="p999")
subset(wtid, country=="United States", year==2001, select="p999")
subset(wtid, country=="United States", year=2001, select="p999")
subset(wtid, country=="United States", year==2001, select="p999")
subset(wtid, country=="United States" & year==2001, select="p999")
subset(wtid, country=="United States" & year==2001, select="p999", drop=TRUE)
subset(wtid, country=="United States" & (wtid$year=="1981" | wtid$year=="2001"), select="p999", drop=TRUE)
wtid[wtid$country=="United States" & (wtid$year=="1981" | wtid$year=="2001"), "p999"]
subset(wtid, country=="United States" & (wtid$year=="1981" | wtid$year=="2001"), select="p999", drop=TRUE)
complete_observations <- complete.cases(wtid[,3:6])
x <- tapply(complete_observations, wtid$country, function(x) sum(x)>=20)
head(x)
str(x)
wtid[x==TRUE]
cnames <- names(x[x==TRUE])
wtid$country %in% cnames
w <-wtid[wtid$country %in% cnames,]
w <- droplevels(w)
levels(w$country)
str(wdit)
str(wtid)
wtid <- read.csv("wtid-20141002.csv",
skip=1, header=TRUE)
str(wtid)
keeps <- c("Country", "Year", "P99.income.threshold",
"P99.5.income.threshold", "P99.9.income.threshold",
"P99.99.income.threshold")
wtid <- wtid[keeps]
colnames(wtid) <- c("country","year", "p99", "p995", "p999", "p9999")
wtid <- wtid[keeps]
str(wtid)
complete_observations <- complete.cases(wtid[,3:6])
x <- tapply(complete_observations, wtid$country, function(x) sum(x)>=20)
str(x)
wtid[x==TRUE]
cnames <- names(x[x==TRUE])
cnames
wtid$country %in% cnames
w <-wtid[wtid$country %in% cnames,]
str(w)
w <- droplevels(w)
levels(w$country)
str(w)
wtid$country %in% cnames
wtid <- read.csv("wtid-20141002.csv",
skip=1, header=TRUE)
### 1 b)
# keeps interested variables and rename them
keeps <- c("Country", "Year", "P99.income.threshold",
"P99.5.income.threshold", "P99.9.income.threshold",
"P99.99.income.threshold")
wtid <- wtid[keeps]
colnames(wtid) <- c("country","year", "p99", "p995", "p999", "p9999")
# gives 99.99% Quantil from the United States for 1981 and 2001
# single output
complete_observations <- complete.cases(wtid[,3:6])
x <- tapply(complete_observations, wtid$country, function(x) sum(x)>=20)
w <-wtid[wtid$country %in% cnames,]
w <- droplevels(w)
levels(w$country)
str(w)
wtid <- read.csv("wtid-20141002.csv",
skip=1, header=TRUE)
keeps <- c("Country", "Year", "P99.income.threshold",
"P99.5.income.threshold", "P99.9.income.threshold",
"P99.99.income.threshold")
wtid <- wtid[keeps]
colnames(wtid) <- c("country","year", "p99", "p995", "p999", "p9999")
complete_observations <- complete.cases(wtid[,3:6])
x <- tapply(complete_observations, wtid$country, function(x) sum(x)>=20)
cnames <- names(x[x==TRUE])
wtid <-wtid[wtid$country %in% cnames,]
wtid <- droplevels(wtid)
levels(wtid$country)
str(wtid)
wtid <- read.csv("wtid-20141002.csv",
skip=1, header=TRUE)
### 1 b)
# keeps interested variables and rename them
keeps <- c("Country", "Year", "P99.income.threshold",
"P99.5.income.threshold", "P99.9.income.threshold",
"P99.99.income.threshold")
wtid <- wtid[keeps]
colnames(wtid) <- c("country","year", "p99", "p995", "p999", "p9999")
# gives 99.99% Quantil from the United States for 1981 and 2001
# single output
complete_observations <- complete.cases(wtid[,3:6])
str(complete_observations)
x <- tapply(complete_observations, wtid$country, function(x) sum(x)>=20)
str(x)
x
cnames <- names(x[x==TRUE])
str(cnames)
remaining_countries <- names(country_indicator[country_indicator==TRUE])
complete_cases_indicator <- complete.cases(wtid[,3:6])
country_indicator <- tapply(complete_cases_indicator, wtid$country, function(x) sum(x)>=20)
remaining_countries <- names(country_indicator[country_indicator==TRUE])
remaining_countries
wtid <-wtid[wtid$country %in% remaining_countries,]
getwd()
?dnorm
rmean
dnorm
?plot
?legen
?legend
### 2 a)
#' Pareto density
#'
#' inputs:  x:      vector of quantiles
#'          shape:  distribution parameter
#'          xmin:   minimum value of x
#' output:  gives the density of the Pareto distribution
dpareto_1 <- function(x, shape, xmin) {
# input validation
if (is.numeric(x) == FALSE){stop("<x> must be numeric")}
if (is.numeric(shape) == FALSE){stop("<shape> must be numeric")}
if (is.numeric(xmin) == FALSE){stop("<xmin> must be numeric")}
if (any(x < xmin) & length(x) == 1){warning("<x> is not larger than <xmin>.")}
if (any(x < xmin) & length(x) > 1 ){warning("not all <x> are larger than <xmin>.")}
if (xmin <= 0){stop("<xmin> must be larger zero")}
if (shape <= 1){stop("<shape> must be larger one")}
# uses dpareto_1_support()
sapply(x, dpareto_1_support, shape=shape, xmin=xmin)
}
# support function applying Pareto density formula
dpareto_1_support <- function(x, shape, xmin){ #comment sinnvoll?!
if (x <= xmin){
0
}
else {
(shape - 1) / xmin * (x / xmin)^(-shape)
}
}
#' Pareto distribution function
#'
#' inputs:  p:      vector of quantiles
#'          shape:  distribution parameter
#'          xmin:   minimum value of p
#' output:  gives the distribution function of the Pareto distribution
ppareto_1 <- function(p, shape, xmin){
if (is.numeric(p) == FALSE){stop("<p> must be numeric")}
if (is.numeric(shape) == FALSE){stop("<shape> must be numeric")}
if (is.numeric(xmin) == FALSE){stop("<xmin> must be numeric")}
if (any(p < xmin) & length(p) == 1){warning("<p> is not larger than <xmin>.")}
if (any(p < xmin) & length(p) > 1 ){warning("not all <p> are larger than <xmin>.")}
if (xmin <= 0){stop("<xmin> must be larger zero")}
if (shape <= 1){stop("<shape> must be larger one")}
sapply(p, ppareto_1_support, shape=shape, xmin=xmin)
}
# support function applying Pareto distribution function formula
ppareto_1_support <- function(p, shape, xmin){
if (p <= xmin){
0
}
else {
1 - (p / xmin)^(-shape + 1)
}
}
## 2 b)
par(mfrow = c(1,2))
xvalues <- seq(from = 0, to = 5, by = 0.01)
plot(xvalues, dpareto_1(xvalues, shape = 2, xmin = 1), col = "green", lwd = 2,
type = "l", cex.lab = 1.5, cex.axis = 1.5, xlim = c(0,5), ylim = c(0,3),
ylab = "f(x; shape, xmin=1)", frame.plot = FALSE)
lines(xvalues, dpareto_1(xvalues, shape = 3, xmin = 1), col = "blue", lwd = 2)
lines(xvalues, dpareto_1(xvalues, shape = 4, xmin = 1), col = "red", lwd = 2)
lines(xvalues, dpareto_1(xvalues, shape = 1e15, xmin = 1), col = "black", lwd = 2)
legend("topright",
c(expression(shape%->%infinity), "shape=4", "shape=3", "shape=2"),
col = c("black","red","blue","green"), lty = c(1,1,1), lwd = c(2,2,2),
cex=0.8)
xvalues=seq(from=0, to=5, by=0.01)
plot(xvalues, ppareto_1(xvalues, shape=2, xmin=1), col="green", lwd=2, type="l",
cex.lab=1.5, cex.axis=1.5, xlim=c(0,5), ylim=c(0,1),frame.plot=FALSE, ylab="f(x; shape, xmin=1)")
lines(xvalues, ppareto_1(xvalues, shape=3, xmin=1), col="blue", lwd=2)
lines(xvalues, ppareto_1(xvalues, shape=4, xmin=1), col="red", lwd=2)
lines(xvalues, ppareto_1(xvalues, shape=1e15, xmin=1), col="black", lwd=2)
dev.off()
dev.off()
plot(xvalues, dpareto_1(xvalues, shape = 2, xmin = 1), col = "green", lwd = 2,
type = "l", cex.lab = 1.5, cex.axis = 1.5, xlim = c(0,5), ylim = c(0,3),
ylab = "f(x; shape, xmin=1)", frame.plot = FALSE)
lines(xvalues, dpareto_1(xvalues, shape = 3, xmin = 1), col = "blue", lwd = 2)
lines(xvalues, dpareto_1(xvalues, shape = 4, xmin = 1), col = "red", lwd = 2)
lines(xvalues, dpareto_1(xvalues, shape = 1e15, xmin = 1), col = "black", lwd = 2)
dev.off()
plot(xvalues, dpareto_1(xvalues, shape = 2, xmin = 1), col = "green", lwd = 2,
type = "l", cex.lab = 1.5, cex.axis = 1.5, xlim = c(0,5), ylim = c(0,3),
ylab = "f(x; shape, xmin=1)", frame.plot = FALSE)
lines(xvalues, dpareto_1(xvalues, shape = 1e15, xmin = 1), col = "black", lwd = 2)
lines(xvalues, dpareto_1(xvalues, shape = 3, xmin = 1), col = "blue", lwd = 2)
lines(xvalues, dpareto_1(xvalues, shape = 4, xmin = 1), col = "red", lwd = 2)
legend("top",
c(expression(shape%->%infinity), "shape=4", "shape=3", "shape=2"),
col = c("black","red","blue","green"), lty = c(1,1,1), lwd = c(2,2,2),
cex=0.8)
legend("topright",
c(expression(shape%->%infinity), "shape=4", "shape=3", "shape=2"),
col = c("black","red","blue","green"), lty = c(1,1,1), lwd = c(2,2,2),
cex=0.8)
dev.off
dev.off()
plot(xvalues, dpareto_1(xvalues, shape = 2, xmin = 1), col = "green", lwd = 2,
type = "l", cex.lab = 1.5, cex.axis = 1.5, xlim = c(0,5), ylim = c(0,3),
ylab = "f(x; shape, xmin=1)", frame.plot = FALSE)
lines(xvalues, dpareto_1(xvalues, shape = 3, xmin = 1), col = "blue", lwd = 2)
lines(xvalues, dpareto_1(xvalues, shape = 4, xmin = 1), col = "red", lwd = 2)
lines(xvalues, dpareto_1(xvalues, shape = 1e15, xmin = 1), col = "black", lwd = 2)
legend("topright",
c(expression(shape%->%infinity), "shape=4", "shape=3", "shape=2"),
col = c("black","red","blue","green"), lty = c(1,1,1), lwd = c(2,2,2),
cex=0.8)
?rmarkdown
wtid_clean <- readRDS("wtid_clean.rds")
getwd()
setwd("~/Desktop")
wtid_clean <- readRDS("wtid_clean.rds")
str(wtid_clean)
all.equal(wtid_clean, wtid)
identical(wtid_clean, wtid)
str(wtid)
wtid <- droplevels(wtid)
levels(wtid$country)
all.equal(wtid_clean, wtid)
identical(wtid_clean, wtid)
?readrds
?readRDS
get_shape_ratio995 <- function(ratio){
1- log(2)/log(ratio)
}
wtid_clean <- transform(wtid_clean, shape_99_995 = get_shape_ratio995(p99 / p995))
str(wtid_clean)
?ggplot
library(ggplot)
library(ggplot2)
?ggplot
?pairs
# Fortgeschrittene Programmierung WS 2014/15
# Hausübung 1 (due to 23.11.2014)
# Janek Thomas, Philipp J. Rösch
library(ggplot2)
### 3
# load wtid_clean.rds
wtid_clean <- readRDS("wtid_clean.rds")
# check differneces between the data frames
all.equal(wtid_clean, wtid)
identical(wtid_clean, wtid)
### 3 a)
# set ratio according to description
ratio <- wtid_clean$p99 / wtid_clean$p995
#' input:   ratio: fraction of 99% quantile devided by 99.5% quantile
#' output:  estimator for parameter shape (ahat)
get_shape_ratio995 <- function(ratio){
1- log(2)/log(ratio)
}
# apply function get_shape_ratio995() and add it to wtid_clean
wtid_clean <- transform(wtid_clean, shape_99_995 = get_shape_ratio995(p99 / p995))
# plot estimator for France and United States
ggplot(data = subset(wtid_clean, country %in% c("France", "United States"))) +
geom_line(aes(x = year, y = shape_99_995, color = country, lty = country)) +
ylab("shape estimate (from P99 / P99.5)") +
theme_minimal(base_size=18)
### 3 b)
#' input:   p1:     first percentile
#'          p2:     second percentile
#'          factor: factor value in Pareto formula
#' output:  estimator for parameter shape (ahat)
get_shape_ratio <- function(p1, p2, factor){
1 - log(factor) / log(p1 / p2)
}
# apply function get_shape_ratio() and add it to wtid_clean
wtid_clean <- transform(wtid_clean,
shape_99_9999 = get_shape_ratio(p99, p9999, 100),
shape_99_999 = get_shape_ratio(p99, p999, 10),
shape_995_999 = get_shape_ratio(p995, p999, 5))
# scatterplot matrix
pairs(~shape_99_995 + shape_99_9999 + shape_99_999 + shape_995_999, data = r,
xlim = c(2,12), ylim = c(2,12), pch=20, cex=0.3, col=rgb(0, 0, 0, 0.1))
pairs(~shape_99_995 + shape_99_9999 + shape_99_999 + shape_995_999, data = wtid_clean,
xlim = c(2,12), ylim = c(2,12), pch=20, cex=0.3, col = rgb(0, 0, 0, 0.1))
pairs(~shape_99_995 + shape_99_9999 + shape_99_999 + shape_995_999, data = wtid_clean,
xlim = c(2,12), ylim = c(2,12), pch=20, cex=0.3, col = rgb(0, 0, 0, 0.1), font.labels=2)
pairs(~shape_99_995 + shape_99_9999 + shape_99_999 + shape_995_999, data = wtid_clean,
xlim = c(2,12), ylim = c(2,12), pch=20, cex=0.3, col = rgb(0, 0, 0, 0.1), font.labels=5)
pairs(~shape_99_995 + shape_99_9999 + shape_99_999 + shape_995_999, data = wtid_clean,
xlim = c(2,12), ylim = c(2,12), pch=20, cex=0.3, col = rgb(0, 0, 0, 0.1), cex.labels=3)
pairs(~shape_99_995 + shape_99_9999 + shape_99_999 + shape_995_999, data = wtid_clean,
xlim = c(2,12), ylim = c(2,12), pch=20, cex=0.3, col = rgb(0, 0, 0, 0.1), cex.labels=1.3)
pairs(~ shape_99_995 + shape_99_9999 + shape_99_999 + shape_995_999,
data = wtid_clean, col = rgb(0, 0, 0, 0.1), pch = 20,
xlim = c(2, 12), ylim = c(2, 12), cex = 0.3, cex.labels = 1.3)
getwd()
?readRDS
library(ggplot2)
setwd("~/Desktop")
options()
options(width = 80)
options()
setwd("~/Desktop/Hausuebung1")
